<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bsons on MongoDB Scala Driver</title>
    <link>/mongo-scala-driver/1.0/bson/</link>
    <description>Recent content in Bsons on MongoDB Scala Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Mar 2015 14:27:51 -0400</lastBuildDate>
    <atom:link href="/mongo-scala-driver/1.0/bson/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Documents</title>
      <link>/mongo-scala-driver/1.0/bson/documents/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/1.0/bson/documents/</guid>
      <description>

&lt;h2 id=&#34;documents&#34;&gt;Documents&lt;/h2&gt;

&lt;p&gt;The scala driver includes two scala specific representations for BSON documents. Following convention from the scala collections library,
there are immutable and mutable implementations of documents. The underlying implementations of the scala Document use the type safe
&lt;a href=&#34;http://api.mongodb.org/java/3.1/?org/bson/BsonDocument.html
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; class. The scala bson classes are available from the &lt;code&gt;org.mongodb.scala.bson&lt;/code&gt;
namespace, which includes type aliases and companion objects.  In general this should suffice but for advanced use cases you may need to
use &lt;code&gt;org.bson&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The scala &lt;code&gt;Document&lt;/code&gt; classes implement &lt;code&gt;TraversableLike[(String, BsonValue)]&lt;/code&gt; and the general API mirrors that of a &lt;code&gt;Map[String, BsonValue]&lt;/code&gt;.
However, unlike &lt;code&gt;Map&lt;/code&gt; implementations of &lt;code&gt;TraversableLike&lt;/code&gt; enables strict type safety as there is no variance in the value type.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/mongo-scala-driver/1.0/mongo-scala-driver/1.0/scaladoc/index.html#org.mongodb.scala.bson.BsonValue
&#34;&gt;&lt;code&gt;BsonValue&lt;/code&gt;&lt;/a&gt; is the type safe representation of a Bson type from the &lt;code&gt;org.bson&lt;/code&gt; library, it represents specific value types. The most commonly used value types are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;BSON type&lt;/th&gt;
&lt;th&gt;Scala type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Document&lt;/td&gt;
&lt;td&gt;&lt;code&gt;org.mongodb.scala.bson.Document&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;&lt;code&gt;List&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Date&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; (ms since epoch)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Double&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Int32&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Int64&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Binary&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Array[Byte]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ObjectId&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ObjectId&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It is actually possible to change or extend these mappings, this will be covered in detail below.&lt;/p&gt;

&lt;p&gt;There are two main &lt;code&gt;Document&lt;/code&gt; classes:&lt;/p&gt;

&lt;h2 id=&#34;immutable-documents&#34;&gt;Immutable Documents&lt;/h2&gt;

&lt;p&gt;Like the Scala collections library the immutable class is the favoured class.  For convenience it is aliased to &lt;code&gt;org.mongodb.scala.Document&lt;/code&gt;
and &lt;code&gt;org.mongodb.scala.bson.Document&lt;/code&gt; as well as being available from &lt;code&gt;org.mongodb.scala.bson.collection.immutable.Document&lt;/code&gt;. Instances of
this type are guaranteed to be immutable for everyone. Such a collection will never change after it is created. Therefore, you can rely on
the fact that accessing the same collection value repeatedly at different points in time will always yield a collection with the same elements.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.bson._

val doc1 = Document(&amp;quot;AL&amp;quot; -&amp;gt; BsonString(&amp;quot;Alabama&amp;quot;))
val doc2 = doc1 + (&amp;quot;AK&amp;quot; -&amp;gt; BsonString(&amp;quot;Alaska&amp;quot;))
val doc3 = doc2 ++ Document(&amp;quot;AR&amp;quot; -&amp;gt; BsonString(&amp;quot;Arkansas&amp;quot;), &amp;quot;AZ&amp;quot; -&amp;gt; BsonString(&amp;quot;Arizona&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mutable-documents&#34;&gt;Mutable Documents&lt;/h2&gt;

&lt;p&gt;To get the mutable &lt;code&gt;Document&lt;/code&gt; version, you need to import it explicitly from &lt;code&gt;org.mongodb.scala.collections.mutable.Document&lt;/code&gt;.  The mutable
&lt;code&gt;Document&lt;/code&gt; can be updated or extended in place. This means you can change, add, or remove elements of the &lt;code&gt;Document&lt;/code&gt; as a side effect. Like
scala collections, when dealing with mutable types you need to understand which code changes which collection and when.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.bson._
import org.mongodb.scala.bson.collection.mutable.Document

val doc = Document(&amp;quot;AL&amp;quot; -&amp;gt; BsonString(&amp;quot;Alabama&amp;quot;))
val doc1 = doc + (&amp;quot;AK&amp;quot; -&amp;gt; BsonString(&amp;quot;Alaska&amp;quot;))   // doc not mutated but new doc created
doc1 ++= Document(&amp;quot;AR&amp;quot; -&amp;gt; BsonString(&amp;quot;Arkansas&amp;quot;), 
                  &amp;quot;AZ&amp;quot; -&amp;gt; BsonString(&amp;quot;Arizona&amp;quot;))  // doc1 mutated as ++= changes in place. 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;implicit-conversions&#34;&gt;Implicit conversions&lt;/h2&gt;

&lt;p&gt;For many of the &lt;code&gt;BsonValue&lt;/code&gt; types there are obvious direct mappings from a Scala type. For example, a &lt;code&gt;String&lt;/code&gt; maps to &lt;code&gt;BsonString&lt;/code&gt;, an &lt;code&gt;Int&lt;/code&gt;
maps to &lt;code&gt;BsonInt32&lt;/code&gt; and a &lt;code&gt;Long&lt;/code&gt; maps to a &lt;code&gt;BsonInt64&lt;/code&gt;.  For convenience these types can be used directly with &lt;code&gt;Documents&lt;/code&gt; and they are
converted by the contract traits in the &lt;a href=&#34;/mongo-scala-driver/1.0/mongo-scala-driver/1.0/scaladoc/index.html#org.mongodb.scala.bson.BsonMagnets$
&#34;&gt;&lt;code&gt;BsonMagnets&lt;/code&gt;&lt;/a&gt; object. As long as there is
an implicit &lt;a href=&#34;/mongo-scala-driver/1.0/mongo-scala-driver/1.0/scaladoc/index.html#org.mongodb.scala.bson.BsonTransformer
&#34;&gt;&lt;code&gt;BsonTransformer&lt;/code&gt;&lt;/a&gt; in scope for any given type, then that type can be
converted into a &lt;code&gt;BsonValue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following &lt;code&gt;BsonTransformers&lt;/code&gt; are in scope by default:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Scala type&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;BsonValue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonBoolean&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonString&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Array[Byte]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonBinary&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Regex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonRegex&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonDateTime&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ObjectId&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonObjectId&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonInt32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonInt64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonDouble&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonNull&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;immutable.Document&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mutable.Document&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Option[T]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonValue&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; has a &lt;code&gt;BsonTransformer&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Seq[(String, T)]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonDocument&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; has a &lt;code&gt;BsonTransformer&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Seq[T]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonArray&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; has a &lt;code&gt;BsonTransformer&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BsonValue&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BsonValue&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.Document

val doc1 = Document(&amp;quot;AL&amp;quot; -&amp;gt; &amp;quot;Alabama&amp;quot;)
val doc2 = doc1 + (&amp;quot;AK&amp;quot; -&amp;gt; &amp;quot;Alaska&amp;quot;)
val doc3 = doc2 ++ Document(&amp;quot;AR&amp;quot; -&amp;gt; &amp;quot;Arkansas&amp;quot;, &amp;quot;population&amp;quot; -&amp;gt; 2.966)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is achieved by making use of the &lt;em&gt;&amp;ldquo;Magnet Pattern&amp;rdquo;&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The magnet pattern is an alternative approach to method overloading. Rather than defining several identically named methods with different parameter lists you define only one method with only one parameter.
&lt;br&gt;&lt;br&gt;
This parameter is called the magnet. Its type is the magnet type, a dedicated type constructed purely as the target of a number of implicit conversions defined in the magnets companion object, which are called the magnet branches and which model the various “overloads”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://spray.io/blog/2012-12-13-the-magnet-pattern/&#34;&gt;The Magnet Pattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the API where we would normally expect a single value or a key value pair or many key value pairs eg: (&lt;code&gt;BsonValue&lt;/code&gt;, &lt;code&gt;(String, BsonValue)&lt;/code&gt;
or &lt;code&gt;Iterable[(String, BsonValue)]&lt;/code&gt;) we require anything that can become those types via &lt;em&gt;&amp;ldquo;&lt;code&gt;CanBeX&lt;/code&gt;&amp;ldquo;&lt;/em&gt; traits that handle the implicit
conversions necessary to conform to the correct types. These traits are &lt;a href=&#34;/mongo-scala-driver/1.0/mongo-scala-driver/1.0/scaladoc/index.html#org.mongodb.scala.bson.BsonMagnets$$CanBeBsonValue
&#34;&gt;&lt;code&gt;CanBeBsonValue&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;/mongo-scala-driver/1.0/mongo-scala-driver/1.0/scaladoc/index.html#org.mongodb.scala.bson.BsonMagnets$$CanBeBsonElement
&#34;&gt;&lt;code&gt;CanBeBsonElement&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&#34;/mongo-scala-driver/1.0/mongo-scala-driver/1.0/scaladoc/index.html#org.mongodb.scala.bson.BsonMagnets$$CanBeBsonElements
&#34;&gt;&lt;code&gt;CanBeBsonElements&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One such example is adding a key value pair to a Document or a list of values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val doc1 = Document(&amp;quot;AL&amp;quot; -&amp;gt; &amp;quot;Alabama&amp;quot;)
val doc2 = Document(&amp;quot;codes&amp;quot; -&amp;gt; List(&amp;quot;AL&amp;quot;, &amp;quot;AK&amp;quot;, &amp;quot;AR&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bson&#34;&gt;Bson&lt;/h3&gt;

&lt;p&gt;The driver also contains a small but powerful interface called &lt;a href=&#34;/mongo-scala-driver/1.0/mongo-scala-driver/1.0/scaladoc/index.html#org.mongodb.scala.bson.conversions.Bson
&#34;&gt;&lt;code&gt;Bson&lt;/code&gt;&lt;/a&gt;. Any class
that represents a BSON document, whether included in the driver itself or from a third party, can implement this interface and can then
be used any place in the high-level API where a BSON document is required. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;collection.find(Document(&amp;quot;x&amp;quot; -&amp;gt; 1))
collection.find(Filters.eq(&amp;quot;x&amp;quot;, 1))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Extended JSON</title>
      <link>/mongo-scala-driver/1.0/bson/extended-json/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-scala-driver/1.0/bson/extended-json/</guid>
      <description>

&lt;h2 id=&#34;mongodb-extended-json&#34;&gt;MongoDB Extended JSON&lt;/h2&gt;

&lt;p&gt;The Scala driver supports reading and writing BSON documents represented as&lt;br /&gt;
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/mongodb-extended-json/&#34;&gt;MongoDB Extended JSON&lt;/a&gt;.  Both variants are supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strict Mode: representations of BSON types that conform to the &lt;a href=&#34;http://www.json.org/&#34;&gt;JSON RFC&lt;/a&gt;. This is the
format that &lt;a href=&#34;http://docs.mongodb.org/manual/reference/program/mongoexport/&#34;&gt;mongoexport&lt;/a&gt; produces and
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/program/mongoimport/&#34;&gt;mongoimport&lt;/a&gt; consumes.&lt;/li&gt;
&lt;li&gt;Shell Mode: a superset of JSON that the
&lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/getting-started-with-the-mongo-shell/&#34;&gt;MongoDB shell&lt;/a&gt; can parse.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, the &lt;code&gt;Document&lt;/code&gt; provides two sets of convenience methods for this purpose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Document.toJson(): a set of overloaded methods that convert a &lt;code&gt;Document&lt;/code&gt; instance to a JSON string&lt;/li&gt;
&lt;li&gt;Document(json): a set of overloaded static factory methods that convert a JSON string to a &lt;code&gt;Document&lt;/code&gt; instance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;writing-json&#34;&gt;Writing JSON&lt;/h2&gt;

&lt;p&gt;Consider the task of implementing a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/program/mongoexport/&#34;&gt;mongoexport&lt;/a&gt;-like tool using the
Scala driver.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val fileName =    // initialize to the path of the file to write to
val collection =  // initialize the collection from which you want to query

val writer: PrintWriter = new PrintWriter(fileName)
collection.find().subscribe(
      (doc: Document) =&amp;gt; output.write(s&amp;quot;${doc.toJson}\r\n&amp;quot;),
      (t: Throwable) =&amp;gt; // handle failure,
      () =&amp;gt; output.close())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Document.toJson()&lt;/code&gt; method constructs an instance of a &lt;code&gt;JsonWriter&lt;/code&gt; with its default settings, which will write in strict mode with no new lines or indentation.&lt;/p&gt;

&lt;p&gt;You can override this default behavior by using one of the overloads of &lt;code&gt;toJson()&lt;/code&gt;.  As an example, consider the task of writing a JSON string
that can be copied and pasted into the MongoDB shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import java.text.SimpleDateFormat

val fmt = new SimpleDateFormat(&amp;quot;dd/MM/yy&amp;quot;)
val first = fmt.parse(&amp;quot;01/01/2014&amp;quot;)
val second = fmt.parse(&amp;quot;01/01/2015&amp;quot;)
val doc = Document(&amp;quot;startDate&amp;quot; -&amp;gt; Document(&amp;quot;$gt&amp;quot; -&amp;gt; first, &amp;quot;$lt&amp;quot; -&amp;gt; second))
println(doc.toJson(new JsonWriterSettings(JsonMode.SHELL)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code snippet will print out MongoDB shell-compatible JSON, which can then be pasted into the shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{ &amp;quot;startDate&amp;quot; : { &amp;quot;$gt&amp;quot; : ISODate(&amp;quot;2014-01-01T05:00:00.000Z&amp;quot;), &amp;quot;$lt&amp;quot; : ISODate(&amp;quot;2015-01-01T05:00:00.000Z&amp;quot;) } }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reading-json&#34;&gt;Reading JSON&lt;/h2&gt;

&lt;p&gt;Consider the task of implementing a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/program/mongoimport/&#34;&gt;mongoimport&lt;/a&gt;-like tool using the
Java driver.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import scala.io.Source
val fileName =    // initialize to the path of the file to read from
val collection =  // initialize the collection from which you want to import to

try {
  for (json &amp;lt;- Source.fromFile(fileName).getLines()) {
    collection.insertOne(Document(json)).head()
  }
} catch {
  case ex: Exception =&amp;gt; println(&amp;quot;Bummer, an exception happened.&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Document(json)&lt;/code&gt; companion helper method constructs an instance of a &lt;code&gt;JsonReader&lt;/code&gt; with the given string and returns an instance of an
equivalent Document instance. &lt;code&gt;JsonReader&lt;/code&gt; automatically detects the JSON flavor in the string, so you do not need to specify it.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;In the &lt;a href=&#34;https://github.com/mongodb/mongo-scala-driver/blob/master/src/examples/scripts&#34;&gt;tools&lt;/a&gt; examples directory, there is sample code for &lt;code&gt;mongoimport&lt;/code&gt; and &lt;code&gt;mongoexport&lt;/code&gt;.
These examples are more fully featured than the above code snippets. They also provide an example of asynchronous error handling, as well
as chaining observables to enforce insertion order on import.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BSON</title>
      <link>/mongo-scala-driver/1.0/bson/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-scala-driver/1.0/bson/</guid>
      <description>

&lt;h2 id=&#34;bson&#34;&gt;BSON&lt;/h2&gt;

&lt;p&gt;The BSON library comprehensively supports &lt;a href=&#34;http://www.bsonspec.org&#34;&gt;BSON&lt;/a&gt;, the data storage and network transfer format that MongoDB uses for
“documents&amp;rdquo;. BSON, short for Binary &lt;a href=&#34;http://json.org/&#34;&gt;JSON&lt;/a&gt;, is a binary-encoded serialization of JSON-like documents.&lt;/p&gt;

&lt;p&gt;For everyday usage there are type aliases and companion objects available from the &lt;a href=&#34;/mongo-scala-driver/1.0/mongo-scala-driver/1.0/scaladoc/index.html#
&#34;&gt;&lt;code&gt;org.mongodb.scala.bson&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-scala-driver/1.0/mongo-scala-driver/1.0/bson/documents/&#34;&gt;Documents&lt;/a&gt;: Documentation of the driver&amp;rsquo;s support for BSON document representations&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-scala-driver/1.0/mongo-scala-driver/1.0/bson/extended-json/&#34;&gt;Extended JSON&lt;/a&gt;: Documentation of the driver&amp;rsquo;s support for MongoDB Extended JSON&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For advanced usage you may need to use &lt;code&gt;org.bson&lt;/code&gt; directly. See the core Java driver documentation for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mongodb.github.io/mongo-java-driver/3.1/bson/readers-and-writers
&#34;&gt;Readers and Writers&lt;/a&gt;: Documentation of the driver&amp;rsquo;s support for stream-based reading and writing
of BSON documents&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mongodb.github.io/mongo-java-driver/3.1/bson/codecs
&#34;&gt;Codec and CodecRegistry&lt;/a&gt;: Documentation of the driver&amp;rsquo;s &lt;code&gt;Codec&lt;/code&gt; API, an abstraction for producing and
consuming  BSON document representations using the stream-based readers and writers&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>